// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using storeroom.Data.EF;

namespace storeroom.Data.Migrations
{
    [DbContext(typeof(storeroomDbContext))]
    [Migration("20210317154043_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("storeroom.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Input", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInput")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryUnit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InputCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Shipper")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StoreroomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreroomId");

                    b.ToTable("Inputs");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExperyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaterialGroupId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Specification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("UnitOrderId")
                        .HasColumnType("int");

                    b.Property<int>("YearManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MaterialGroupId");

                    b.HasIndex("UnitOrderId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MaterialGroups");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialInput", b =>
                {
                    b.Property<int>("InputId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InputId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialInputs");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialOutput", b =>
                {
                    b.Property<int>("OutputId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OutputId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialOutputs");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialPurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialPurchaseOrders");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialPurchaseProposal", b =>
                {
                    b.Property<int>("PurchaseProposalId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseProposalId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialPurchaseProposals");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialStoreroom", b =>
                {
                    b.Property<int>("StoreroomId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Compartment")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityMax")
                        .HasColumnType("int");

                    b.Property<int>("QuantityMin")
                        .HasColumnType("int");

                    b.Property<int>("Rack")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.HasKey("StoreroomId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialStorerooms");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialTransfer", b =>
                {
                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TransferId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialTransfers");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Output", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOutput")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameRecipient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OutputCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StoreroomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreroomId");

                    b.ToTable("Outputs");
                });

            modelBuilder.Entity("storeroom.Data.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameOfOrder")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreroomId")
                        .HasColumnType("int");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreroomId");

                    b.HasIndex("SuplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("storeroom.Data.Entities.PurchaseProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreroomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreroomId");

                    b.ToTable("PurchaseProposals");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Storeroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("StoreroomCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storerooms");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Supliers");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTransfer")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Receipient")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StoreroomId")
                        .HasColumnType("int");

                    b.Property<int>("StoreroomNewId")
                        .HasColumnType("int");

                    b.Property<string>("TransferCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoreroomNewId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Input", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Storeroom", "Storeroom")
                        .WithMany("Inputs")
                        .HasForeignKey("StoreroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeroom");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Material", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Brand", "Brand")
                        .WithMany("Materials")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Country", "Country")
                        .WithMany("Materials")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.MaterialGroup", "MaterialGroup")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Unit", "Unit")
                        .WithMany("Materials")
                        .HasForeignKey("UnitOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Country");

                    b.Navigation("MaterialGroup");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialInput", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Input", "Input")
                        .WithMany("MaterialInputs")
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Material", "Material")
                        .WithMany("MaterialInputs")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Input");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialOutput", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Material", "Material")
                        .WithMany("MaterialOutputs")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Output", "Output")
                        .WithMany("MaterialOutputs")
                        .HasForeignKey("OutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Output");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialPurchaseOrder", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Material", "Material")
                        .WithMany("MaterialPurchaseOrders")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("MaterialPurchaseOrders")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialPurchaseProposal", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Material", "Material")
                        .WithMany("MaterialPurchaseProposals")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.PurchaseProposal", "PurchaseProposal")
                        .WithMany("MaterialPurchaseProposals")
                        .HasForeignKey("PurchaseProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("PurchaseProposal");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialStoreroom", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Material", "Material")
                        .WithMany("MaterialStorerooms")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Storeroom", "Storeroom")
                        .WithMany("MaterialStorerooms")
                        .HasForeignKey("StoreroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Storeroom");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialTransfer", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Material", "Material")
                        .WithMany("MaterialTransfers")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Transfer", "Transfer")
                        .WithMany("MaterialTransfers")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Output", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Storeroom", "Storeroom")
                        .WithMany("Outputs")
                        .HasForeignKey("StoreroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeroom");
                });

            modelBuilder.Entity("storeroom.Data.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Storeroom", "Storeroom")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StoreroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storeroom.Data.Entities.Suplier", "Suplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeroom");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("storeroom.Data.Entities.PurchaseProposal", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Storeroom", "Storeroom")
                        .WithMany("PurchaseProposals")
                        .HasForeignKey("StoreroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeroom");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Transfer", b =>
                {
                    b.HasOne("storeroom.Data.Entities.Storeroom", "Storeroom")
                        .WithMany("Transfers")
                        .HasForeignKey("StoreroomNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeroom");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Brand", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Country", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Input", b =>
                {
                    b.Navigation("MaterialInputs");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Material", b =>
                {
                    b.Navigation("MaterialInputs");

                    b.Navigation("MaterialOutputs");

                    b.Navigation("MaterialPurchaseOrders");

                    b.Navigation("MaterialPurchaseProposals");

                    b.Navigation("MaterialStorerooms");

                    b.Navigation("MaterialTransfers");
                });

            modelBuilder.Entity("storeroom.Data.Entities.MaterialGroup", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Output", b =>
                {
                    b.Navigation("MaterialOutputs");
                });

            modelBuilder.Entity("storeroom.Data.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("MaterialPurchaseOrders");
                });

            modelBuilder.Entity("storeroom.Data.Entities.PurchaseProposal", b =>
                {
                    b.Navigation("MaterialPurchaseProposals");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Storeroom", b =>
                {
                    b.Navigation("Inputs");

                    b.Navigation("MaterialStorerooms");

                    b.Navigation("Outputs");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseProposals");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Suplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Transfer", b =>
                {
                    b.Navigation("MaterialTransfers");
                });

            modelBuilder.Entity("storeroom.Data.Entities.Unit", b =>
                {
                    b.Navigation("Materials");
                });
#pragma warning restore 612, 618
        }
    }
}
